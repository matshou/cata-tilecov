import java.nio.file.Paths
import java.nio.file.Path

/**
 * Register a project property of a given name as a {@code boolean} value.
 *
 * @param name name of the property to register.
 * @param defaultValue value to register with if property is {@code null}.
 * @see Boolean#parseBoolean(String)
 */
void registerBooleanProjectProperty(String name, boolean defaultValue) {

    def property = project.findProperty(name)
    if (property == null)
    {
        // search for environment variable with same name before assigning default value
        def envVariable = providers.environmentVariable(name).forUseAtConfigurationTime()
        if (envVariable.present) {
            property = envVariable.get()
        }
        else property = defaultValue
    }
    project.ext.setProperty(name, Boolean.parseBoolean(property as String))
}
// is the build being run on a CI server?
registerBooleanProjectProperty('CI', false)

Properties localProjectProperties = new Properties()
project.ext.localProperties = localProjectProperties

/*
 * handle locating properties file when configuring buildSrc project
 * as the path to project/root directory will be different
 */
def rootDir = projectDir.name != 'buildSrc' ? project.rootDir : project.rootDir.parentFile
def propertiesFile = rootDir.toPath().resolve('local.properties').toFile()
if (propertiesFile.exists()) {
    localProjectProperties.load(propertiesFile.newDataInputStream())
}

/**
 * Initialize and get project property from {@code local.properties} file with designated type.
 *
 * @param name property name to search for in local properties.
 * @param type class to initialize the property as.
 * @param env environment variable to use if property not found.
 * @param required whether to throw an exception if property is not found.
 * @param defaultValue value to be used if property was not found.
 * @return found project property of type {@code T} or {@code null} if no property found.
 */
def <T> T getLocalProjectProperty(String name, Class<T> type, String env, boolean required, T defaultValue) {

    Properties localProperties = project.ext.localProperties
    String property = localProperties.getProperty(name, '')
    if (property.isEmpty())
    {
        if (!System.hasProperty(name))
        {
            // when env parameter is not defined search for env variable with property name
            def sEnv = env != null && !env.isEmpty() ? env : name
            def envVariable = providers.environmentVariable(sEnv).forUseAtConfigurationTime()
            if (envVariable.present) {
                property = envVariable.get()
            }
            else if (required && defaultValue == null) {
                throw new InvalidUserDataException("Unable to find local project property ${name}")
            }
            else return defaultValue
        }
        else property = System.getProperty(name)
    }
    if (type == Path) {
        return Paths.get(property) as T
    }
    else return property as T
}

/**
 * Initialize and register project property from {@code local.properties} file.
 *
 * @param name property name to search for in local properties.
 * @param type class to initialize the property as.
 * @param env environment variable to use if property not found.
 * @param required whether to throw an exception if property is not found.
 * @return found project property or {@code null} if no property found.
 */
def registerLocalProjectProperty(String name, Class<Object> type, String env, boolean required) {
    project.ext.setProperty(name, getLocalProjectProperty(name, type, env, required, null))
}

// initialize local project properties here
// some local properties (env variables) will not be available on CI server
if (!CI) {
    // path to Cataclysm Bright Nights directory
    registerLocalProjectProperty('gameDir', Path.class, 'GAME_DIR', false)
}
